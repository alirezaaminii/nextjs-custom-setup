@import "sizes";

//-----------------------gradient
@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;
  @if $orientation == vertical {
    // vertical
    background: -moz-linear-gradient(bottom, $start-color 0%, $end-color 100%) !important;
    background: -webkit-gradient(linear, left bottom, left top, color-stop(0%, $start-color), color-stop(100%, $end-color)) !important;
    background: -webkit-linear-gradient(bottom, $start-color 0%, $end-color 100%) !important;
    background: -o-linear-gradient(bottom, $start-color 0%, $end-color 100%) !important;
    background: -ms-linear-gradient(bottom, $start-color 0%, $end-color 100%) !important;
    background: linear-gradient(to top, $start-color 0%, $end-color 100%) !important;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$start-color', endColorstr='$end-color', GradientType=0);
  } @else if $orientation == horizontal {
    // horizontal
    background: -moz-linear-gradient(left, $start-color 0%, $end-color 100%) !important;
    background: -webkit-gradient(linear, left top, right top, color-stop(0%, $start-color), color-stop(100%, $end-color)) !important;
    background: -webkit-linear-gradient(left, $start-color 0%, $end-color 100%) !important;
    background: -o-linear-gradient(left, $start-color 0%, $end-color 100%) !important;
    background: -ms-linear-gradient(left, $start-color 0%, $end-color 100%) !important;
    background: linear-gradient(to right, $start-color 0%, $end-color 100%) !important;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$start-color', endColorstr='$end-color', GradientType=1);
  } @else {
    // radial
    background: -moz-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%) !important;
    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%, $start-color), color-stop(100%, $end-color)) !important;
    background: -webkit-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%) !important;
    background: -o-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%) !important;
    background: -ms-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%) !important;
    background: radial-gradient(ellipse at center, $start-color 0%, $end-color 100%) !important;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$start-color', endColorstr='$end-color', GradientType=1);
  }
}
//@include gradient(black,white,horizontal);
//-----------------------end gradient

//-------------mixin transition
/* @include transition(all,2s,ease-out); */
@mixin transition($what: all, $time: 0.2s, $how: ease-in-out) {
  -webkit-transition: $what $time $how;
  -moz-transition: $what $time $how;
  -ms-transition: $what $time $how;
  -o-transition: $what $time $how;
  transition: $what $time $how;
}

//-------------Pseudo (after,before)
@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

//-------------CSS triangles
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false) {
  @include pseudo($pos: $position);
  width: 0;
  height: 0;
  @if $round {
    border-radius: 3px;
  }
  @if $direction == down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
    margin-top: 0 - round( $size / 2.5 );
  } @else if $direction == up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round( $size / 2.5 );
  } @else if $direction == right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    margin-right: -$size;
  } @else if $direction == left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    margin-left: -$size;
  }
}

//-------------mixin hover
@mixin hover {
  &:not([disabled]):hover {
    @content;
  }
}
//sample
//.button {
//  border: 1px solid black;
//  @include hover {
//    border-width: 2px;
//  }
//}

//-------------------Title
@mixin titleGraphy {
  text-shadow: 7px 4px 1px rgba(0, 0, 0, 0.5),
  3px 3px 5px rgba(0, 0, 0, 0.5);
  line-height: 1.2;
  direction: rtl;
}

//------------------animations
@mixin animate($name, $duration, $iteration, $direction) {
  -webkit-animation-duration: $duration;
  -moz-animation-duration: $duration;
  -o-animation-duration: $duration;
  animation-duration: $duration;

  -webkit-animation-iteration-count: $iteration;
  -moz-animation-iteration-count: $iteration;
  -o-animation-iteration-count: $iteration;
  animation-iteration-count: $iteration;

  -webkit-animation-name: $name;
  -moz-animation-name: $name;
  -o-animation-name: $name;
  animation-name: $name;

  -webkit-animation-direction: $direction;
  -moz-animation-direction: $direction;
  -o-animation-direction: $direction;
  animation-direction: $direction;
}

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-o-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}

@include keyframes(pulsate) {
  0% {
    @include gradient(#29243b, #432b41, vertical);
  }
  50% {
    @include gradient(#432b41, #29243b, vertical);
  }
  100% {
    @include gradient(#29243b, #432b41, vertical);
  }
}

@mixin pulsate {
  @include animate(pulsate, 1.6s, infinite, normal);
}

//----------------------filter blur
@mixin blurFilter($size){
  filter:blur($size);
  -o-filter:blur($size);
  -ms-filter:blur($size);
  -moz-filter:blur($size);
  -webkit-filter:blur($size);
}

//----------------------transition
@mixin transition($transition...) {
  -moz-transition:    $transition;
  -o-transition:      $transition;
  -webkit-transition: $transition;
  transition:         $transition;
}


@mixin mq($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == max {
      $width: $width - 1px;
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}